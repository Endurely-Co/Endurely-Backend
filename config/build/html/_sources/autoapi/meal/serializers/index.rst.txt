meal.serializers
================

.. py:module:: meal.serializers


Attributes
----------

.. autoapisummary::

   meal.serializers.required


Classes
-------

.. autoapisummary::

   meal.serializers.MealPlanSerializer
   meal.serializers.MealInfoSerializer
   meal.serializers.MealRecommendationSerializer
   meal.serializers.NutritionSerializer
   meal.serializers.NutrientSerializer
   meal.serializers.FoodItemSerializer


Module Contents
---------------

.. py:data:: required

.. py:class:: MealPlanSerializer(instance=None, data=empty, **kwargs)

   Bases: :py:obj:`rest_framework.serializers.ModelSerializer`


   A `ModelSerializer` is just a regular `Serializer`, except that:

   * A set of default fields are automatically populated.
   * A set of default validators are automatically populated.
   * Default `.create()` and `.update()` implementations are provided.

   The process of automatically determining a set of serializer fields
   based on the model fields is reasonably complex, but you almost certainly
   don't need to dig into the implementation.

   If the `ModelSerializer` class *doesn't* generate the set of fields that
   you need you should either declare the extra/differing fields explicitly on
   the serializer class, or simply use a `Serializer` class.


   .. py:class:: Meta

      .. py:attribute:: model


      .. py:attribute:: fields
         :value: '__all__'




.. py:class:: MealInfoSerializer(instance=None, data=empty, **kwargs)

   Bases: :py:obj:`rest_framework.serializers.ModelSerializer`


   A `ModelSerializer` is just a regular `Serializer`, except that:

   * A set of default fields are automatically populated.
   * A set of default validators are automatically populated.
   * Default `.create()` and `.update()` implementations are provided.

   The process of automatically determining a set of serializer fields
   based on the model fields is reasonably complex, but you almost certainly
   don't need to dig into the implementation.

   If the `ModelSerializer` class *doesn't* generate the set of fields that
   you need you should either declare the extra/differing fields explicitly on
   the serializer class, or simply use a `Serializer` class.


   .. py:class:: Meta

      .. py:attribute:: model


      .. py:attribute:: fields
         :value: '__all__'



      .. py:attribute:: extra_kwargs



.. py:class:: MealRecommendationSerializer(instance=None, data=empty, **kwargs)

   Bases: :py:obj:`rest_framework.serializers.ModelSerializer`


   A `ModelSerializer` is just a regular `Serializer`, except that:

   * A set of default fields are automatically populated.
   * A set of default validators are automatically populated.
   * Default `.create()` and `.update()` implementations are provided.

   The process of automatically determining a set of serializer fields
   based on the model fields is reasonably complex, but you almost certainly
   don't need to dig into the implementation.

   If the `ModelSerializer` class *doesn't* generate the set of fields that
   you need you should either declare the extra/differing fields explicitly on
   the serializer class, or simply use a `Serializer` class.


   .. py:class:: Meta

      .. py:attribute:: model


      .. py:attribute:: fields
         :value: '__all__'




.. py:class:: NutritionSerializer(instance=None, data=empty, **kwargs)

   Bases: :py:obj:`rest_framework.serializers.ModelSerializer`


   A `ModelSerializer` is just a regular `Serializer`, except that:

   * A set of default fields are automatically populated.
   * A set of default validators are automatically populated.
   * Default `.create()` and `.update()` implementations are provided.

   The process of automatically determining a set of serializer fields
   based on the model fields is reasonably complex, but you almost certainly
   don't need to dig into the implementation.

   If the `ModelSerializer` class *doesn't* generate the set of fields that
   you need you should either declare the extra/differing fields explicitly on
   the serializer class, or simply use a `Serializer` class.


   .. py:class:: Meta

      .. py:attribute:: model


      .. py:attribute:: exclude
         :value: ['created_at']




.. py:class:: NutrientSerializer(instance=None, data=empty, **kwargs)

   Bases: :py:obj:`rest_framework.serializers.Serializer`


   The BaseSerializer class provides a minimal class which may be used
   for writing custom serializer implementations.

   Note that we strongly restrict the ordering of operations/properties
   that may be used on the serializer in order to enforce correct usage.

   In particular, if a `data=` argument is passed then:

   .is_valid() - Available.
   .initial_data - Available.
   .validated_data - Only available after calling `is_valid()`
   .errors - Only available after calling `is_valid()`
   .data - Only available after calling `is_valid()`

   If a `data=` argument is not passed then:

   .is_valid() - Not available.
   .initial_data - Not available.
   .validated_data - Not available.
   .errors - Not available.
   .data - Available.


   .. py:attribute:: name


   .. py:attribute:: summary


.. py:class:: FoodItemSerializer(instance=None, data=empty, **kwargs)

   Bases: :py:obj:`rest_framework.serializers.ModelSerializer`


   A `ModelSerializer` is just a regular `Serializer`, except that:

   * A set of default fields are automatically populated.
   * A set of default validators are automatically populated.
   * Default `.create()` and `.update()` implementations are provided.

   The process of automatically determining a set of serializer fields
   based on the model fields is reasonably complex, but you almost certainly
   don't need to dig into the implementation.

   If the `ModelSerializer` class *doesn't* generate the set of fields that
   you need you should either declare the extra/differing fields explicitly on
   the serializer class, or simply use a `Serializer` class.


   .. py:attribute:: macronutrients


   .. py:attribute:: vitamins


   .. py:attribute:: minerals


   .. py:class:: Meta

      .. py:attribute:: model


      .. py:attribute:: fields
         :value: ['item', 'valid', 'macronutrients', 'vitamins', 'minerals', 'other_nutrients', 'id']




